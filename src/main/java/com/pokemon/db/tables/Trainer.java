/**
 * This class is generated by jOOQ
 */
package com.pokemon.db.tables;


import com.pokemon.db.Keys;
import com.pokemon.db.Public;
import com.pokemon.db.enums.Gender;
import com.pokemon.db.tables.records.TrainerRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Trainer extends TableImpl<TrainerRecord> {

	private static final long serialVersionUID = -1637999356;

	/**
	 * The reference instance of <code>public.trainer</code>
	 */
	public static final Trainer TRAINER = new Trainer();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<TrainerRecord> getRecordType() {
		return TrainerRecord.class;
	}

	/**
	 * The column <code>public.trainer.name</code>.
	 */
	public final TableField<TrainerRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(45).nullable(false), this, "");

	/**
	 * The column <code>public.trainer.tid</code>.
	 */
	public final TableField<TrainerRecord, Integer> TID = createField("tid", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>public.trainer.gender</code>.
	 */
	public final TableField<TrainerRecord, Gender> GENDER = createField("gender", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(com.pokemon.db.enums.Gender.class), this, "");

	/**
	 * The column <code>public.trainer.age</code>.
	 */
	public final TableField<TrainerRecord, Integer> AGE = createField("age", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>public.trainer.username</code>.
	 */
	public final TableField<TrainerRecord, String> USERNAME = createField("username", org.jooq.impl.SQLDataType.VARCHAR.length(45).nullable(false), this, "");

	/**
	 * Create a <code>public.trainer</code> table reference
	 */
	public Trainer() {
		this("trainer", null);
	}

	/**
	 * Create an aliased <code>public.trainer</code> table reference
	 */
	public Trainer(String alias) {
		this(alias, TRAINER);
	}

	private Trainer(String alias, Table<TrainerRecord> aliased) {
		this(alias, aliased, null);
	}

	private Trainer(String alias, Table<TrainerRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<TrainerRecord, Integer> getIdentity() {
		return Keys.IDENTITY_TRAINER;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<TrainerRecord> getPrimaryKey() {
		return Keys.TRAINER_PKEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<TrainerRecord>> getKeys() {
		return Arrays.<UniqueKey<TrainerRecord>>asList(Keys.TRAINER_PKEY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Trainer as(String alias) {
		return new Trainer(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Trainer rename(String name) {
		return new Trainer(name, null);
	}
}
